name: build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # NOTE: the version is also defined in roapi_http_release.yml, columnq_cli_release.yml and Dockerfile
  RUST_TC_NIGHTLY_VER: "2022-09-24"

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: "-C target-cpu=skylake"
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
          ${{ runner.os }}-cargo-
    - name: Install minimal stable with clippy and rustfmt
      uses: actions-rs/toolchain@v1
      with:
        profile: default
        toolchain: stable
        override: true
    - name: Check
      run: cargo clippy
    - name: Format
      run: cargo fmt --check
    - name: Build
      run: cargo build
    - name: Run tests
      run: |
        cargo test
    - name: Trim cache
      run: |
        which cargo-cache || cargo install cargo-cache
        cargo cache trim -l 1G

  simd_test:
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: "-C target-cpu=skylake"
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: simd-3-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
        restore-keys: |
          simd-3-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
          simd-3-${{ runner.os }}-cargo-
    - name: Install nightly rust
      uses: actions-rs/toolchain@v1
      with:
        profile: default
        # toolchain: nightly
        toolchain: nightly-${{ env.RUST_TC_NIGHTLY_VER }}
        override: true
    - name: Run tests
      run: |
        cargo test --features simd
    - name: Trim cache
      run: |
        which cargo-cache || cargo install cargo-cache
        cargo cache trim -l 1G

  database_test:
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: "-C target-cpu=skylake"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: database-1-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
          restore-keys: |
            database-1-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
            database-1-${{ runner.os }}-cargo-
      - name: Install nightly rust
        uses: actions-rs/toolchain@v1
        with:
          profile: default
          toolchain: nightly-${{ env.RUST_TC_NIGHTLY_VER }}
          override: true
      - name: Check
        run: cargo clippy --features database
      - name: Build
        run: cargo build --features database
      - name: Run tests
        run: |
          cargo test --features database
      - name: Trim cache
        run: |
          which cargo-cache || cargo install cargo-cache
          cargo cache trim -l 1G

  object_store_memory_test:
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: "-C target-cpu=skylake"
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: s3-1-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
        restore-keys: |
          s3-1-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
          s3-1-${{ runner.os }}-cargo-
    - name: Install nightly rust
      uses: actions-rs/toolchain@v1
      with:
        profile: default
        # toolchain: nightly
        toolchain: nightly-${{ env.RUST_TC_NIGHTLY_VER }}
        override: true
    - name: Install minio server (S3)
      run: |
        docker run -d -p 9000:9000 quay.io/minio/minio server /data
    - name: Install minio client (S3)
      run: |
        curl https://dl.min.io/client/mc/release/linux-amd64/mc --create-dirs -o $HOME/minio-binaries/mc
        chmod +x $HOME/minio-binaries/mc
    - name: Create bucket and copy test data (S3)
      run: |
        $HOME/minio-binaries/mc alias set local http://127.0.0.1:9000 minioadmin minioadmin
        $HOME/minio-binaries/mc mb local/test-data
        $HOME/minio-binaries/mc cp test_data/blogs.parquet local/test-data
        $HOME/minio-binaries/mc cp test_data/blogs.parquet "local/test-data/blogs space.parquet"
        $HOME/minio-binaries/mc cp test_data/blogs.parquet local/test-data/blogs/
    - name: Install fake gcs server (GCS)
      run: |
        docker run -d -p 4443:4443 fsouza/fake-gcs-server -scheme http
        echo '{"gcs_base_url": "http://localhost:4443", "disable_oauth": true, "client_email": "", "private_key": ""}' > "/tmp/gcs.json"
    - name: Create bucket and copy test data (GCS)
      run: |
        curl -XPOST --data-binary '{"name":"test-data"}' -H "Content-Type: application/json" "http://localhost:4443/storage/v1/b"
        curl -XPOST --data-binary '@test_data/blogs.parquet' "http://localhost:4443/storage/v1/b/test-data/o?uploadType=media&name=blogs.parquet"
    - name: Install azure storage server (Azure)
      run: |
        docker run -d -p 10000:10000 -p 10001:10001 -p 10002:10002 mcr.microsoft.com/azure-storage/azurite
    - name: Create bucket and copy test data (Azure)
      run: |
        az storage container create -n test-data --connection-string 'DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://localhost:10000/devstoreaccount1;QueueEndpoint=http://localhost:10001/devstoreaccount1;'
        az storage blob upload -f test_data/blogs.parquet -c test-data -n blogs.parquet --connection-string 'DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://localhost:10000/devstoreaccount1;QueueEndpoint=http://localhost:10001/devstoreaccount1;'
    - name: Start roapi and Query
      env:
        AWS_DEFAULT_REGION: "us-east-1"
        AWS_ACCESS_KEY_ID: minioadmin
        AWS_SECRET_ACCESS_KEY: minioadmin
        AWS_ENDPOINT_URL: "http://127.0.0.1:9000"
        GOOGLE_SERVICE_ACCOUNT: "/tmp/gcs.json"
        AZURITE_BLOB_STORAGE_URL: "http://127.0.0.1:10000"
        AZURE_STORAGE_USE_EMULATOR: "true"
        AZURE_ALLOW_HTTP: "true"
        # https://docs.microsoft.com/en-us/azure/storage/common/storage-use-azurite?tabs=visual-studio#http-connection-strings
        AZURE_STORAGE_ACCOUNT_NAME: "devstoreaccount1"
        AZURE_STORAGE_ACCOUNT_KEY: "Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw=="
      uses: BerniWittmann/background-server-action@v1.0.4
      with:
        command: /home/runner/work/roapi/roapi/test_end_to_end/query_blogs.sh
        build: cargo build
        start: cargo run --bin roapi -- -c test_end_to_end/test_object_store_memory.yml
        wait-on: "http://127.0.0.1:8000/api/schema"
        # By default, wait-on will retry for 60 seconds. You can pass a custom timeout in seconds using wait-on-timeout.
        # 10 minutes = 600 seconds
        wait-on-timeout: 600

  object_store_direct_test:
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: "-C target-cpu=skylake"
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: s3-1-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
        restore-keys: |
          s3-1-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
          s3-1-${{ runner.os }}-cargo-
    - name: Install nightly rust
      uses: actions-rs/toolchain@v1
      with:
        profile: default
        # toolchain: nightly
        toolchain: nightly-${{ env.RUST_TC_NIGHTLY_VER }}
        override: true
    - name: Install minio server (S3)
      run: |
        docker run -d -p 9000:9000 quay.io/minio/minio server /data
    - name: Install minio client (S3)
      run: |
        curl https://dl.min.io/client/mc/release/linux-amd64/mc --create-dirs -o $HOME/minio-binaries/mc
        chmod +x $HOME/minio-binaries/mc
    - name: Create bucket and copy test data (S3)
      run: |
        $HOME/minio-binaries/mc alias set local http://127.0.0.1:9000 minioadmin minioadmin
        $HOME/minio-binaries/mc mb local/test-data
        $HOME/minio-binaries/mc cp test_data/blogs.parquet local/test-data
        $HOME/minio-binaries/mc cp test_data/blogs.parquet "local/test-data/blogs space.parquet"
        $HOME/minio-binaries/mc cp test_data/blogs.parquet local/test-data/blogs/
    - name: Install fake gcs server (GCS)
      run: |
        docker run -d -p 4443:4443 fsouza/fake-gcs-server -scheme http
        echo '{"gcs_base_url": "http://localhost:4443", "disable_oauth": true, "client_email": "", "private_key": ""}' > "/tmp/gcs.json"
    - name: Create bucket and copy test data (GCS)
      run: |
        curl -XPOST --data-binary '{"name":"test-data"}' -H "Content-Type: application/json" "http://localhost:4443/storage/v1/b"
        curl -XPOST --data-binary '@test_data/blogs.parquet' "http://localhost:4443/storage/v1/b/test-data/o?uploadType=media&name=blogs.parquet"
    - name: Install azure storage server (Azure)
      run: |
        docker run -d -p 10000:10000 -p 10001:10001 -p 10002:10002 mcr.microsoft.com/azure-storage/azurite
    - name: Create bucket and copy test data (Azure)
      run: |
        az storage container create -n test-data --connection-string 'DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://localhost:10000/devstoreaccount1;QueueEndpoint=http://localhost:10001/devstoreaccount1;'
        az storage blob upload -f test_data/blogs.parquet -c test-data -n blogs.parquet --connection-string 'DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://localhost:10000/devstoreaccount1;QueueEndpoint=http://localhost:10001/devstoreaccount1;'
    - name: Start roapi and Query
      env:
        AWS_DEFAULT_REGION: "us-east-1"
        AWS_ACCESS_KEY_ID: minioadmin
        AWS_SECRET_ACCESS_KEY: minioadmin
        AWS_ENDPOINT_URL: http://127.0.0.1:9000
        GOOGLE_SERVICE_ACCOUNT: "/tmp/gcs.json"
        AZURITE_BLOB_STORAGE_URL: "http://127.0.0.1:10000"
        AZURE_STORAGE_USE_EMULATOR: "true"
        AZURE_ALLOW_HTTP: "true"
        # https://docs.microsoft.com/en-us/azure/storage/common/storage-use-azurite?tabs=visual-studio#http-connection-strings
        AZURE_STORAGE_ACCOUNT_NAME: "devstoreaccount1"
        AZURE_STORAGE_ACCOUNT_KEY: "Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw=="
      uses: BerniWittmann/background-server-action@v1.0.4
      with:
        command: /home/runner/work/roapi/roapi/test_end_to_end/query_blogs.sh
        build: cargo build
        start: cargo run --bin roapi -- -c test_end_to_end/test_object_store_direct.yml
        wait-on: "http://127.0.0.1:8000/api/schema"
        # By default, wait-on will retry for 60 seconds. You can pass a custom timeout in seconds using wait-on-timeout.
        # 10 minutes = 600 seconds
        wait-on-timeout: 600

  # make sure native-tls always builds
  openssl_build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install minimal stable with clippy and rustfmt
      uses: actions-rs/toolchain@v1
      with:
        profile: default
        toolchain: stable
        override: true
    - name: Check
      run: cargo clippy --no-default-features --features=native-tls
    - name: Trim cache
      run: |
        which cargo-cache || cargo install cargo-cache
        cargo cache trim -l 1G

  # cross compile from x86 mac to arm64, this is to make sure universal2
  # release will build without error
  mac_cross_build:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: mac-1-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
        restore-keys: |
          mac-1-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
          mac-1-${{ runner.os }}-cargo-
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly-${{ env.RUST_TC_NIGHTLY_VER }}
        target: aarch64-apple-darwin
        profile: minimal
        default: true
    - name: Build binary - universal2
      env:
        DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer
        MACOSX_DEPLOYMENT_TARGET: '10.9'
      run: |
        # set SDKROOT for C dependencies
        export SDKROOT=$(xcrun --sdk macosx --show-sdk-path)
        cd roapi && \
          cargo build --bin roapi --features database --target aarch64-apple-darwin
    - name: Trim cache
      run: |
        which cargo-cache || cargo install cargo-cache
        cargo cache trim -l 1G

  docker_build:
    name: Docker Image Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: false
          load: true
          tags: roapi:latest
      - name: Test
        run: |
          docker run --rm roapi:latest --help
